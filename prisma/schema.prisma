// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    configured    Boolean   @default(false)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model ShiftType {
    id                  Int                   @id @unique @default(autoincrement())
    shiftType           String                @unique
    startTime           DateTime
    endTime             DateTime
    shift               Shift[]
    // employee            Employee[]
    shiftTypesToEmplyee ShiftTypeToEmployee[]
}

model ShiftTypeToEmployee {
    id         String    @unique @default(cuid())
    shiftTypes ShiftType @relation(fields: [shiftName], references: [shiftType])
    shiftName  String
    employee   Employee  @relation(fields: [employeeId], references: [id])
    employeeId String
}

model Shift {
    id          String           @id @default(cuid())
    shiftType   ShiftType?       @relation(fields: [shiftTypeId], references: [id])
    shiftTypeId Int?
    workDay     WorkDay?         @relation(fields: [workDayId], references: [id])
    workDayId   Int?
    employees   EmployeeShifts[]
}

model WorkDay {
    id     Int     @id @default(autoincrement())
    day    String  @unique
    shifts Shift[]
    // week   Int
    // month  String
    active Boolean
}

model Employee {
    id                  String                @id @default(cuid())
    firstName           String
    lastName            String
    // shiftTypes            ShiftType             @relation(fields: [canWorkShiftTypes], references: [id])
    // canWorkShiftTypes     Int
    createdAt           DateTime              @default(now())
    updatedAt           DateTime              @updatedAt
    employeeShift       EmployeeShifts[]
    shiftTypeToEmployee ShiftTypeToEmployee[]
}

model EmployeeShifts {
    id         String   @id @default(cuid())
    employee   Employee @relation(fields: [employeeId], references: [id])
    employeeId String
    shift      Shift    @relation(fields: [shiftId], references: [id])
    shiftId    String
}
